/*
 * Copyright (c) 2018. Abstrium SAS <team (at) pydio.com>
 * This file is part of Pydio Cells.
 *
 * Pydio Cells is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pydio Cells is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Pydio Cells.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <https://pydio.com>.
 */

// Package log provides a persistence layer for json-formatted logs generated by the application.
//
// It is intended to provide an out-of-the-box solution for storing and querying the logs, but should be
// replaced by more scalable solutions like ELK.
package log

import (
	"reflect"
	"strconv"
	"time"

	"github.com/pydio/cells/common"
	"github.com/pydio/cells/common/proto/log"
)

// MessageRepository exposes interface methods to manage the log messages provided by Pydio.
type MessageRepository interface {
	PutLog(map[string]string) error
	ListLogs(string, int32, int32) (chan log.ListLogResponse, error)
	AggregatedLogs(string, string, int32) (chan log.TimeRangeResponse, error)
}

/* HELPER METHODS */

// FromLogMsgToMap uses reflection to transform a log.LogMessage in a map[string]interface{}.
// It also converts MsgId to corresponding label and timestamp as second in time.
func FromLogMsgToMap(doc *log.LogMessage, m map[string]interface{}) {
	msg := reflect.Indirect(reflect.ValueOf(*doc))

	for i := 0; i < msg.NumField(); i++ {
		currName := msg.Type().Field(i).Name
		currValue := msg.Field(i)
		switch currValue.Kind() {
		case reflect.String:
			currStr := currValue.Interface().(string)
			if currName == common.KEY_MSG_ID {
				currStr = common.LogEventLabels[currStr]
			}
			m[currName] = currStr
		case reflect.Int32:
			currInt := currValue.Interface().(int32)
			if currName == common.KEY_TS {
				currTs := time.Unix(int64(currInt), 0)
				m[currName] = currTs
			} else {
				m[currName] = strconv.FormatInt(int64(currInt), 10)
			}
		}
		// else: Skip unknown and/or unexpected format
	}
}

// FromLogMsgToStringMap uses reflection to transform a log.LogMessage in a map[string]string.
func FromLogMsgToStringMap(doc *log.LogMessage, m map[string]string) {

	msg := reflect.Indirect(reflect.ValueOf(*doc))

	for i := 0; i < msg.NumField(); i++ {
		currName := msg.Type().Field(i).Name
		currValue := msg.Field(i)
		switch currValue.Kind() {
		case reflect.String:
			m[currName] = currValue.Interface().(string)
		case reflect.Int32:
			currInt := currValue.Interface().(int32)
			if currName == common.KEY_TS {
				currTs := time.Unix(int64(currInt), 0)
				m[currName] = currTs.Format(time.RFC3339)
			} else {
				m[currName] = strconv.FormatInt(int64(currInt), 10)
			}
		}
		// else skip unknown and unexpected format
	}
}

// Single entry point to convert time.Time to Unix timestamps defined as int32
func convertTimeToTs(ts time.Time) int32 {
	return int32(ts.Unix())
}
