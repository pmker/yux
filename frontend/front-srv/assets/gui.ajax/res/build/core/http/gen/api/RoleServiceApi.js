/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelIdmRole = require('../model/IdmRole');

var _modelIdmRole2 = _interopRequireDefault(_modelIdmRole);

var _modelRestRolesCollection = require('../model/RestRolesCollection');

var _modelRestRolesCollection2 = _interopRequireDefault(_modelRestRolesCollection);

var _modelRestSearchRoleRequest = require('../model/RestSearchRoleRequest');

var _modelRestSearchRoleRequest2 = _interopRequireDefault(_modelRestSearchRoleRequest);

/**
* RoleService service.
* @module api/RoleServiceApi
* @version 1.0
*/

var RoleServiceApi = (function () {

  /**
  * Constructs a new RoleServiceApi. 
  * @alias module:api/RoleServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function RoleServiceApi(apiClient) {
    _classCallCheck(this, RoleServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Delete a Role by ID
   * @param {String} uuid 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmRole} and HTTP response
   */

  RoleServiceApi.prototype.deleteRoleWithHttpInfo = function deleteRoleWithHttpInfo(uuid) {
    var postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling deleteRole");
    }

    var pathParams = {
      'Uuid': uuid
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelIdmRole2['default'];

    return this.apiClient.callApi('/role/{Uuid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Delete a Role by ID
   * @param {String} uuid 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmRole}
   */

  RoleServiceApi.prototype.deleteRole = function deleteRole(uuid) {
    return this.deleteRoleWithHttpInfo(uuid).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Get a Role by ID
   * @param {String} uuid 
   * @param {Object} opts Optional parameters
   * @param {String} opts.label 
   * @param {Boolean} opts.isTeam 
   * @param {Boolean} opts.groupRole 
   * @param {Boolean} opts.userRole 
   * @param {Number} opts.lastUpdated 
   * @param {Array.<String>} opts.autoApplies 
   * @param {Boolean} opts.policiesContextEditable 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmRole} and HTTP response
   */

  RoleServiceApi.prototype.getRoleWithHttpInfo = function getRoleWithHttpInfo(uuid, opts) {
    opts = opts || {};
    var postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling getRole");
    }

    var pathParams = {
      'Uuid': uuid
    };
    var queryParams = {
      'Label': opts['label'],
      'IsTeam': opts['isTeam'],
      'GroupRole': opts['groupRole'],
      'UserRole': opts['userRole'],
      'LastUpdated': opts['lastUpdated'],
      'AutoApplies': this.apiClient.buildCollectionParam(opts['autoApplies'], 'csv'),
      'PoliciesContextEditable': opts['policiesContextEditable']
    };
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelIdmRole2['default'];

    return this.apiClient.callApi('/role/{Uuid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Get a Role by ID
   * @param {String} uuid 
   * @param {Object} opts Optional parameters
   * @param {String} opts.label 
   * @param {Boolean} opts.isTeam 
   * @param {Boolean} opts.groupRole 
   * @param {Boolean} opts.userRole 
   * @param {Number} opts.lastUpdated 
   * @param {Array.<String>} opts.autoApplies 
   * @param {Boolean} opts.policiesContextEditable 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmRole}
   */

  RoleServiceApi.prototype.getRole = function getRole(uuid, opts) {
    return this.getRoleWithHttpInfo(uuid, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Search Roles
   * @param {module:model/RestSearchRoleRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRolesCollection} and HTTP response
   */

  RoleServiceApi.prototype.searchRolesWithHttpInfo = function searchRolesWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling searchRoles");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestRolesCollection2['default'];

    return this.apiClient.callApi('/role', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Search Roles
   * @param {module:model/RestSearchRoleRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRolesCollection}
   */

  RoleServiceApi.prototype.searchRoles = function searchRoles(body) {
    return this.searchRolesWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Create or update a Role
   * @param {String} uuid 
   * @param {module:model/IdmRole} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmRole} and HTTP response
   */

  RoleServiceApi.prototype.setRoleWithHttpInfo = function setRoleWithHttpInfo(uuid, body) {
    var postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling setRole");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling setRole");
    }

    var pathParams = {
      'Uuid': uuid
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelIdmRole2['default'];

    return this.apiClient.callApi('/role/{Uuid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Create or update a Role
   * @param {String} uuid 
   * @param {module:model/IdmRole} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmRole}
   */

  RoleServiceApi.prototype.setRole = function setRole(uuid, body) {
    return this.setRoleWithHttpInfo(uuid, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return RoleServiceApi;
})();

exports['default'] = RoleServiceApi;
module.exports = exports['default'];
