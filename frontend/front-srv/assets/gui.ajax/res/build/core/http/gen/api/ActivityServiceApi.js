/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelActivityObject = require('../model/ActivityObject');

var _modelActivityObject2 = _interopRequireDefault(_modelActivityObject);

var _modelActivitySearchSubscriptionsRequest = require('../model/ActivitySearchSubscriptionsRequest');

var _modelActivitySearchSubscriptionsRequest2 = _interopRequireDefault(_modelActivitySearchSubscriptionsRequest);

var _modelActivityStreamActivitiesRequest = require('../model/ActivityStreamActivitiesRequest');

var _modelActivityStreamActivitiesRequest2 = _interopRequireDefault(_modelActivityStreamActivitiesRequest);

var _modelActivitySubscription = require('../model/ActivitySubscription');

var _modelActivitySubscription2 = _interopRequireDefault(_modelActivitySubscription);

var _modelRestSubscriptionsCollection = require('../model/RestSubscriptionsCollection');

var _modelRestSubscriptionsCollection2 = _interopRequireDefault(_modelRestSubscriptionsCollection);

/**
* ActivityService service.
* @module api/ActivityServiceApi
* @version 1.0
*/

var ActivityServiceApi = (function () {

  /**
  * Constructs a new ActivityServiceApi. 
  * @alias module:api/ActivityServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function ActivityServiceApi(apiClient) {
    _classCallCheck(this, ActivityServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Load subscriptions to other users/nodes feeds
   * @param {module:model/ActivitySearchSubscriptionsRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestSubscriptionsCollection} and HTTP response
   */

  ActivityServiceApi.prototype.searchSubscriptionsWithHttpInfo = function searchSubscriptionsWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling searchSubscriptions");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestSubscriptionsCollection2['default'];

    return this.apiClient.callApi('/activity/subscriptions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Load subscriptions to other users/nodes feeds
   * @param {module:model/ActivitySearchSubscriptionsRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestSubscriptionsCollection}
   */

  ActivityServiceApi.prototype.searchSubscriptions = function searchSubscriptions(body) {
    return this.searchSubscriptionsWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Load the the feeds of the currently logged user
   * @param {module:model/ActivityStreamActivitiesRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityObject} and HTTP response
   */

  ActivityServiceApi.prototype.streamWithHttpInfo = function streamWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling stream");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelActivityObject2['default'];

    return this.apiClient.callApi('/activity/stream', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Load the the feeds of the currently logged user
   * @param {module:model/ActivityStreamActivitiesRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityObject}
   */

  ActivityServiceApi.prototype.stream = function stream(body) {
    return this.streamWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Manage subscriptions to other users/nodes feeds
   * @param {module:model/ActivitySubscription} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivitySubscription} and HTTP response
   */

  ActivityServiceApi.prototype.subscribeWithHttpInfo = function subscribeWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling subscribe");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelActivitySubscription2['default'];

    return this.apiClient.callApi('/activity/subscribe', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Manage subscriptions to other users/nodes feeds
   * @param {module:model/ActivitySubscription} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivitySubscription}
   */

  ActivityServiceApi.prototype.subscribe = function subscribe(body) {
    return this.subscribeWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return ActivityServiceApi;
})();

exports['default'] = ActivityServiceApi;
module.exports = exports['default'];
