/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelRestRelationResponse = require('../model/RestRelationResponse');

var _modelRestRelationResponse2 = _interopRequireDefault(_modelRestRelationResponse);

var _modelRestUserStateResponse = require('../model/RestUserStateResponse');

var _modelRestUserStateResponse2 = _interopRequireDefault(_modelRestUserStateResponse);

/**
* GraphService service.
* @module api/GraphServiceApi
* @version 1.0
*/

var GraphServiceApi = (function () {

  /**
  * Constructs a new GraphServiceApi. 
  * @alias module:api/GraphServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function GraphServiceApi(apiClient) {
    _classCallCheck(this, GraphServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Compute relation of context user with another user
   * @param {String} userId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRelationResponse} and HTTP response
   */

  GraphServiceApi.prototype.relationWithHttpInfo = function relationWithHttpInfo(userId) {
    var postBody = null;

    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling relation");
    }

    var pathParams = {
      'UserId': userId
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestRelationResponse2['default'];

    return this.apiClient.callApi('/graph/relation/{UserId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Compute relation of context user with another user
   * @param {String} userId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRelationResponse}
   */

  GraphServiceApi.prototype.relation = function relation(userId) {
    return this.relationWithHttpInfo(userId).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Compute accessible workspaces for a given user
   * @param {String} segment 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserStateResponse} and HTTP response
   */

  GraphServiceApi.prototype.userStateWithHttpInfo = function userStateWithHttpInfo(segment) {
    var postBody = null;

    // verify the required parameter 'segment' is set
    if (segment === undefined || segment === null) {
      throw new Error("Missing the required parameter 'segment' when calling userState");
    }

    var pathParams = {
      'Segment': segment
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestUserStateResponse2['default'];

    return this.apiClient.callApi('/graph/state/{Segment}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Compute accessible workspaces for a given user
   * @param {String} segment 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserStateResponse}
   */

  GraphServiceApi.prototype.userState = function userState(segment) {
    return this.userStateWithHttpInfo(segment).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return GraphServiceApi;
})();

exports['default'] = GraphServiceApi;
module.exports = exports['default'];
