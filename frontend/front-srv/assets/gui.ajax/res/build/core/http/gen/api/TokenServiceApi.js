/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelRestResetPasswordRequest = require('../model/RestResetPasswordRequest');

var _modelRestResetPasswordRequest2 = _interopRequireDefault(_modelRestResetPasswordRequest);

var _modelRestResetPasswordResponse = require('../model/RestResetPasswordResponse');

var _modelRestResetPasswordResponse2 = _interopRequireDefault(_modelRestResetPasswordResponse);

var _modelRestResetPasswordTokenResponse = require('../model/RestResetPasswordTokenResponse');

var _modelRestResetPasswordTokenResponse2 = _interopRequireDefault(_modelRestResetPasswordTokenResponse);

var _modelRestRevokeRequest = require('../model/RestRevokeRequest');

var _modelRestRevokeRequest2 = _interopRequireDefault(_modelRestRevokeRequest);

var _modelRestRevokeResponse = require('../model/RestRevokeResponse');

var _modelRestRevokeResponse2 = _interopRequireDefault(_modelRestRevokeResponse);

/**
* TokenService service.
* @module api/TokenServiceApi
* @version 1.0
*/

var TokenServiceApi = (function () {

  /**
  * Constructs a new TokenServiceApi. 
  * @alias module:api/TokenServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function TokenServiceApi(apiClient) {
    _classCallCheck(this, TokenServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Finish up the reset password process by providing the unique token
   * @param {module:model/RestResetPasswordRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestResetPasswordResponse} and HTTP response
   */

  TokenServiceApi.prototype.resetPasswordWithHttpInfo = function resetPasswordWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling resetPassword");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestResetPasswordResponse2['default'];

    return this.apiClient.callApi('/auth/reset-password', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Finish up the reset password process by providing the unique token
   * @param {module:model/RestResetPasswordRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestResetPasswordResponse}
   */

  TokenServiceApi.prototype.resetPassword = function resetPassword(body) {
    return this.resetPasswordWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Generate a unique token for the reset password process
   * @param {String} userLogin 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestResetPasswordTokenResponse} and HTTP response
   */

  TokenServiceApi.prototype.resetPasswordTokenWithHttpInfo = function resetPasswordTokenWithHttpInfo(userLogin) {
    var postBody = null;

    // verify the required parameter 'userLogin' is set
    if (userLogin === undefined || userLogin === null) {
      throw new Error("Missing the required parameter 'userLogin' when calling resetPasswordToken");
    }

    var pathParams = {
      'UserLogin': userLogin
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestResetPasswordTokenResponse2['default'];

    return this.apiClient.callApi('/auth/reset-password-token/{UserLogin}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Generate a unique token for the reset password process
   * @param {String} userLogin 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestResetPasswordTokenResponse}
   */

  TokenServiceApi.prototype.resetPasswordToken = function resetPasswordToken(userLogin) {
    return this.resetPasswordTokenWithHttpInfo(userLogin).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Revoke a JWT token
   * @param {module:model/RestRevokeRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRevokeResponse} and HTTP response
   */

  TokenServiceApi.prototype.revokeWithHttpInfo = function revokeWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling revoke");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestRevokeResponse2['default'];

    return this.apiClient.callApi('/auth/token/revoke', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Revoke a JWT token
   * @param {module:model/RestRevokeRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRevokeResponse}
   */

  TokenServiceApi.prototype.revoke = function revoke(body) {
    return this.revokeWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return TokenServiceApi;
})();

exports['default'] = TokenServiceApi;
module.exports = exports['default'];
