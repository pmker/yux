/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelUpdateApplyUpdateResponse = require('../model/UpdateApplyUpdateResponse');

var _modelUpdateApplyUpdateResponse2 = _interopRequireDefault(_modelUpdateApplyUpdateResponse);

var _modelUpdateUpdateResponse = require('../model/UpdateUpdateResponse');

var _modelUpdateUpdateResponse2 = _interopRequireDefault(_modelUpdateUpdateResponse);

/**
* UpdateService service.
* @module api/UpdateServiceApi
* @version 1.0
*/

var UpdateServiceApi = (function () {

  /**
  * Constructs a new UpdateServiceApi. 
  * @alias module:api/UpdateServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function UpdateServiceApi(apiClient) {
    _classCallCheck(this, UpdateServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Apply an update to a given version
   * @param {String} targetVersion 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateApplyUpdateResponse} and HTTP response
   */

  UpdateServiceApi.prototype.applyUpdateWithHttpInfo = function applyUpdateWithHttpInfo(targetVersion) {
    var postBody = null;

    // verify the required parameter 'targetVersion' is set
    if (targetVersion === undefined || targetVersion === null) {
      throw new Error("Missing the required parameter 'targetVersion' when calling applyUpdate");
    }

    var pathParams = {
      'TargetVersion': targetVersion
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelUpdateApplyUpdateResponse2['default'];

    return this.apiClient.callApi('/update/{TargetVersion}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Apply an update to a given version
   * @param {String} targetVersion 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateApplyUpdateResponse}
   */

  UpdateServiceApi.prototype.applyUpdate = function applyUpdate(targetVersion) {
    return this.applyUpdateWithHttpInfo(targetVersion).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Check the remote server to see if there are available binaries
   * @param {Object} opts Optional parameters
   * @param {String} opts.channel Channel name.
   * @param {String} opts.packageName Name of the currently running application.
   * @param {String} opts.currentVersion Current version of the application.
   * @param {String} opts.GOOS Current GOOS.
   * @param {String} opts.GOARCH Current GOARCH.
   * @param {String} opts.serviceName Not Used : specific service to get updates for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateUpdateResponse} and HTTP response
   */

  UpdateServiceApi.prototype.updateRequiredWithHttpInfo = function updateRequiredWithHttpInfo(opts) {
    opts = opts || {};
    var postBody = null;

    var pathParams = {};
    var queryParams = {
      'Channel': opts['channel'],
      'PackageName': opts['packageName'],
      'CurrentVersion': opts['currentVersion'],
      'GOOS': opts['GOOS'],
      'GOARCH': opts['GOARCH'],
      'ServiceName': opts['serviceName']
    };
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelUpdateUpdateResponse2['default'];

    return this.apiClient.callApi('/update', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Check the remote server to see if there are available binaries
   * @param {Object} opts Optional parameters
   * @param {String} opts.channel Channel name.
   * @param {String} opts.packageName Name of the currently running application.
   * @param {String} opts.currentVersion Current version of the application.
   * @param {String} opts.GOOS Current GOOS.
   * @param {String} opts.GOARCH Current GOARCH.
   * @param {String} opts.serviceName Not Used : specific service to get updates for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateUpdateResponse}
   */

  UpdateServiceApi.prototype.updateRequired = function updateRequired(opts) {
    return this.updateRequiredWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return UpdateServiceApi;
})();

exports['default'] = UpdateServiceApi;
module.exports = exports['default'];
