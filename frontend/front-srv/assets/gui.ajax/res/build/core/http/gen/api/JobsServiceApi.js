/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelJobsCtrlCommand = require('../model/JobsCtrlCommand');

var _modelJobsCtrlCommand2 = _interopRequireDefault(_modelJobsCtrlCommand);

var _modelJobsCtrlCommandResponse = require('../model/JobsCtrlCommandResponse');

var _modelJobsCtrlCommandResponse2 = _interopRequireDefault(_modelJobsCtrlCommandResponse);

var _modelJobsDeleteTasksRequest = require('../model/JobsDeleteTasksRequest');

var _modelJobsDeleteTasksRequest2 = _interopRequireDefault(_modelJobsDeleteTasksRequest);

var _modelJobsDeleteTasksResponse = require('../model/JobsDeleteTasksResponse');

var _modelJobsDeleteTasksResponse2 = _interopRequireDefault(_modelJobsDeleteTasksResponse);

var _modelJobsListJobsRequest = require('../model/JobsListJobsRequest');

var _modelJobsListJobsRequest2 = _interopRequireDefault(_modelJobsListJobsRequest);

var _modelRestUserJobRequest = require('../model/RestUserJobRequest');

var _modelRestUserJobRequest2 = _interopRequireDefault(_modelRestUserJobRequest);

var _modelRestUserJobResponse = require('../model/RestUserJobResponse');

var _modelRestUserJobResponse2 = _interopRequireDefault(_modelRestUserJobResponse);

var _modelRestUserJobsCollection = require('../model/RestUserJobsCollection');

var _modelRestUserJobsCollection2 = _interopRequireDefault(_modelRestUserJobsCollection);

/**
* JobsService service.
* @module api/JobsServiceApi
* @version 1.0
*/

var JobsServiceApi = (function () {

  /**
  * Constructs a new JobsServiceApi. 
  * @alias module:api/JobsServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function JobsServiceApi(apiClient) {
    _classCallCheck(this, JobsServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Send Control Commands to one or many jobs / tasks
   * @param {module:model/JobsCtrlCommand} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobsCtrlCommandResponse} and HTTP response
   */

  JobsServiceApi.prototype.userControlJobWithHttpInfo = function userControlJobWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling userControlJob");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelJobsCtrlCommandResponse2['default'];

    return this.apiClient.callApi('/jobs/user', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Send Control Commands to one or many jobs / tasks
   * @param {module:model/JobsCtrlCommand} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobsCtrlCommandResponse}
   */

  JobsServiceApi.prototype.userControlJob = function userControlJob(body) {
    return this.userControlJobWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Create a predefined job to be run directly
   * @param {String} jobName 
   * @param {module:model/RestUserJobRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserJobResponse} and HTTP response
   */

  JobsServiceApi.prototype.userCreateJobWithHttpInfo = function userCreateJobWithHttpInfo(jobName, body) {
    var postBody = body;

    // verify the required parameter 'jobName' is set
    if (jobName === undefined || jobName === null) {
      throw new Error("Missing the required parameter 'jobName' when calling userCreateJob");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling userCreateJob");
    }

    var pathParams = {
      'JobName': jobName
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestUserJobResponse2['default'];

    return this.apiClient.callApi('/jobs/user/{JobName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Create a predefined job to be run directly
   * @param {String} jobName 
   * @param {module:model/RestUserJobRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserJobResponse}
   */

  JobsServiceApi.prototype.userCreateJob = function userCreateJob(jobName, body) {
    return this.userCreateJobWithHttpInfo(jobName, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Send a control command to clean tasks on a given job
   * @param {module:model/JobsDeleteTasksRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobsDeleteTasksResponse} and HTTP response
   */

  JobsServiceApi.prototype.userDeleteTasksWithHttpInfo = function userDeleteTasksWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling userDeleteTasks");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelJobsDeleteTasksResponse2['default'];

    return this.apiClient.callApi('/jobs/tasks/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Send a control command to clean tasks on a given job
   * @param {module:model/JobsDeleteTasksRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobsDeleteTasksResponse}
   */

  JobsServiceApi.prototype.userDeleteTasks = function userDeleteTasks(body) {
    return this.userDeleteTasksWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List jobs associated with current user
   * @param {module:model/JobsListJobsRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserJobsCollection} and HTTP response
   */

  JobsServiceApi.prototype.userListJobsWithHttpInfo = function userListJobsWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling userListJobs");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestUserJobsCollection2['default'];

    return this.apiClient.callApi('/jobs/user', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List jobs associated with current user
   * @param {module:model/JobsListJobsRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserJobsCollection}
   */

  JobsServiceApi.prototype.userListJobs = function userListJobs(body) {
    return this.userListJobsWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return JobsServiceApi;
})();

exports['default'] = JobsServiceApi;
module.exports = exports['default'];
