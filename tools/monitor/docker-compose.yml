---
version: '3'
services:
    elasticsearch:
        build: elasticsearch/
        environment:
            ES_JAVA_OPTS: "-Xmx256m -Xms256m"
        volumes:
            - './elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro'
        ports: ['9200:9200']
        networks: ['stack']

    kibana:
        build: kibana/
        volumes:
            - './kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro'
        ports: ['127.0.0.1:5601:5601']
        networks: ['stack']
        depends_on: ['elasticsearch']

    logstash:
        build: logstash/
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        volumes:
            - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
            - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
        networks: ['stack']
        depends_on: ['elasticsearch']

    filebeat:
        build: filebeat/
        volumes:
            - '/private/var/log/pydio:/mnt/log:ro'
            - './filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro'
        networks: ['stack']
        depends_on: ['elasticsearch']

  # heartbeat:
  #   image: docker.elastic.co/beats/heartbeat:${TAG}
  #   networks: ['stack']
  #   depends_on: ['elasticsearch']
  #
  # metricbeat:
  #   image: docker.elastic.co/beats/metricbeat:${TAG}
  #   # The commented sections below enable Metricbeat to monitor the Docker host,
  #   # rather than the Metricbeat container. It's problematic with Docker for
  #   # Windows, however, since "/proc", "/sys" etc. don't exist on Windows.
  #   # The same likely applies to OSX (needs testing).
  #   # volumes:
  #   #   - /proc:/hostfs/proc:ro
  #   #   - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
  #   #   - /:/hostfs:ro
  #   command: metricbeat -e # -system.hostfs=/hostfs
  #   networks: ['stack']
  #   depends_on: ['elasticsearch']
  #
  # packetbeat:
  #   image: docker.elastic.co/beats/packetbeat:${TAG}
  #   # Packetbeat needs some elevated privileges to capture network traffic.
  #   # We'll grant them with POSIX capabilities.
  #   cap_add: ['NET_RAW', 'NET_ADMIN']
  #   # Use "host mode" networking to allow Packetbeat to capture traffic from
  #   # the real network interface on the host, rather than being isolated to the
  #   # container's virtual interface.
  #   network_mode: host
  #   # Since we did that, Packetbeat is not part of the "stack" Docker network
  #   # that the other containers are connected to, and thus can't resolve the
  #   # hostname "elasticsearch". Instead, we'll tell it to find Elasticsearch
  #   # on "localhost", which is the Docker host machine in this context.
  #   command: packetbeat -v -e -E output.elasticsearch.hosts='["localhost:9200"]'
  #   depends_on: ['elasticsearch']
  #
  # # Run a short-lived container to set up Kibana index patterns and dashboards.
  # configure_kibana:
  #   # Any Beats image will suffice. We'll use Metricbeat.
  #   image: docker.elastic.co/beats/metricbeat:${TAG}
  #   volumes: ['./scripts/configure-kibana.sh:/usr/local/bin/configure-kibana.sh:ro']
  #   # The script may have CR/LF linefeeds if using Docker for Windows, so make
  #   # sure that they don't confuse Bash.
  #   command: ['/bin/bash', '-c', 'cat /usr/local/bin/configure-kibana.sh | tr -d "\r" | bash']
  #   environment: ['ELASTIC_VERSION=${ELASTIC_VERSION}']
  #   networks: ['stack']
  #   depends_on: ['kibana']

networks: {stack: {}}
