package service

import (
	"fmt"

	"github.com/micro/go-micro"
	"github.com/micro/go-micro/registry"
	"github.com/micro/go-plugins/trace/zipkin"
	"github.com/pydio/go-os/trace"
	"github.com/pydio/cells/common/config"
)

func newTraceProvider(service micro.Service) error {
	var options []micro.Option

	if enabled := config.Get("trace", "enabled").String(""); enabled != "true" {
		return fmt.Errorf("Not enabled")
	}

	addr := config.Get("trace", "collector", "addr").String("")

	t := zipkin.NewTrace(
		trace.Collectors(addr),
	)

	s := &registry.Service{Name: service.Server().Options().Name}

	options = append(options, micro.WrapClient(trace.ClientWrapper(t, s)))
	options = append(options, micro.WrapHandler(trace.HandlerWrapper(t, s)))

	options = append(options, micro.BeforeStop(func() error {
		t.Close()
		return nil
	}))

	service.Init(options...)

	return nil
}
