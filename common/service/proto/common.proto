syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

package service;

enum OperationType {
    OR = 0;
    AND = 1;
}

enum ResourcePolicyAction {
    ANY = 0;
    OWNER = 1;
    READ = 2;
    WRITE = 3;
    EDIT_RULES = 4;
}

message Query {
    repeated google.protobuf.Any SubQueries = 1;
    OperationType Operation = 2;
    ResourcePolicyQuery ResourcePolicyQuery = 3;
    int64 Offset = 4;
    int64 Limit = 5;
    int32 groupBy = 6;
}

message ResourcePolicyQuery {
    repeated string Subjects = 1;
    bool Empty = 2;
    bool Any = 3;
}

message ResourcePolicy {
    int64 id = 1;
    string Resource = 2;
    ResourcePolicyAction Action = 3;
    string Subject = 4;
    enum PolicyEffect {
        deny = 0;
        allow = 1;
    }
    PolicyEffect Effect = 5;
    string JsonConditions = 6;
}

message ActionOutputQuery {
    // Check if ActionOutput has Success = true
    bool Success = 1;
    // Check if ActionOutput has Success = false
    bool Failed = 2;

    // Find occurence of string in body
    string StringBodyCompare = 3;
    // Find similar Json
    string JsonBodyCompare = 4;
    // Find occurence of string in error
    string ErrorStringCompare = 5;
    // Invert condition
    bool Not = 6;
}

message SourceSingleQuery{
    // Regexp to filter context by IP
    string IPMask = 2;
    // Regexp to filter for a given user-agent
    string UserAgent = 3;
    // Limit to a given workspaceId
    string WorkspaceId = 4;
    // Invert condition
    bool Not = 5;
}

message StopEvent {
    string ServiceName = 1;
}

service Starter {
    rpc Start(google.protobuf.Empty) returns (google.protobuf.Empty);
}

service Service {
    rpc Status(google.protobuf.Empty) returns (StatusResponse);
}

message StatusResponse {
    bool OK = 1;
    string Address = 2;
}

service Archiver {
    rpc Archive(Query) returns (StatusResponse);
}

// TODO - move from there
message ChangesArchiveQuery {
    uint64 RemainingRows = 1;
}
