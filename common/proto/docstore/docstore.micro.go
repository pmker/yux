// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: docstore.proto

/*
Package docstore is a generated protocol buffer package.

It is generated from these files:
	docstore.proto

It has these top-level messages:
	Document
	DocumentQuery
	PutDocumentRequest
	PutDocumentResponse
	GetDocumentRequest
	GetDocumentResponse
	DeleteDocumentsRequest
	DeleteDocumentsResponse
	ListDocumentsRequest
	ListDocumentsResponse
	CountDocumentsResponse
*/
package docstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DocStore service

type DocStoreClient interface {
	PutDocument(ctx context.Context, in *PutDocumentRequest, opts ...client.CallOption) (*PutDocumentResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...client.CallOption) (*GetDocumentResponse, error)
	DeleteDocuments(ctx context.Context, in *DeleteDocumentsRequest, opts ...client.CallOption) (*DeleteDocumentsResponse, error)
	CountDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...client.CallOption) (*CountDocumentsResponse, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...client.CallOption) (DocStore_ListDocumentsClient, error)
}

type docStoreClient struct {
	c           client.Client
	serviceName string
}

func NewDocStoreClient(serviceName string, c client.Client) DocStoreClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "docstore"
	}
	return &docStoreClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *docStoreClient) PutDocument(ctx context.Context, in *PutDocumentRequest, opts ...client.CallOption) (*PutDocumentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.PutDocument", in)
	out := new(PutDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...client.CallOption) (*GetDocumentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.GetDocument", in)
	out := new(GetDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) DeleteDocuments(ctx context.Context, in *DeleteDocumentsRequest, opts ...client.CallOption) (*DeleteDocumentsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.DeleteDocuments", in)
	out := new(DeleteDocumentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) CountDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...client.CallOption) (*CountDocumentsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.CountDocuments", in)
	out := new(CountDocumentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...client.CallOption) (DocStore_ListDocumentsClient, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.ListDocuments", &ListDocumentsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &docStoreListDocumentsClient{stream}, nil
}

type DocStore_ListDocumentsClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListDocumentsResponse, error)
}

type docStoreListDocumentsClient struct {
	stream client.Streamer
}

func (x *docStoreListDocumentsClient) Close() error {
	return x.stream.Close()
}

func (x *docStoreListDocumentsClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *docStoreListDocumentsClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *docStoreListDocumentsClient) Recv() (*ListDocumentsResponse, error) {
	m := new(ListDocumentsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DocStore service

type DocStoreHandler interface {
	PutDocument(context.Context, *PutDocumentRequest, *PutDocumentResponse) error
	GetDocument(context.Context, *GetDocumentRequest, *GetDocumentResponse) error
	DeleteDocuments(context.Context, *DeleteDocumentsRequest, *DeleteDocumentsResponse) error
	CountDocuments(context.Context, *ListDocumentsRequest, *CountDocumentsResponse) error
	ListDocuments(context.Context, *ListDocumentsRequest, DocStore_ListDocumentsStream) error
}

func RegisterDocStoreHandler(s server.Server, hdlr DocStoreHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&DocStore{hdlr}, opts...))
}

type DocStore struct {
	DocStoreHandler
}

func (h *DocStore) PutDocument(ctx context.Context, in *PutDocumentRequest, out *PutDocumentResponse) error {
	return h.DocStoreHandler.PutDocument(ctx, in, out)
}

func (h *DocStore) GetDocument(ctx context.Context, in *GetDocumentRequest, out *GetDocumentResponse) error {
	return h.DocStoreHandler.GetDocument(ctx, in, out)
}

func (h *DocStore) DeleteDocuments(ctx context.Context, in *DeleteDocumentsRequest, out *DeleteDocumentsResponse) error {
	return h.DocStoreHandler.DeleteDocuments(ctx, in, out)
}

func (h *DocStore) CountDocuments(ctx context.Context, in *ListDocumentsRequest, out *CountDocumentsResponse) error {
	return h.DocStoreHandler.CountDocuments(ctx, in, out)
}

func (h *DocStore) ListDocuments(ctx context.Context, stream server.Streamer) error {
	m := new(ListDocumentsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DocStoreHandler.ListDocuments(ctx, m, &docStoreListDocumentsStream{stream})
}

type DocStore_ListDocumentsStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListDocumentsResponse) error
}

type docStoreListDocumentsStream struct {
	stream server.Streamer
}

func (x *docStoreListDocumentsStream) Close() error {
	return x.stream.Close()
}

func (x *docStoreListDocumentsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *docStoreListDocumentsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *docStoreListDocumentsStream) Send(m *ListDocumentsResponse) error {
	return x.stream.Send(m)
}
