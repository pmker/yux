syntax = "proto3";

package rest;

import "github.com/pydio/cells/common/proto/tree/tree.proto";
import "github.com/pydio/cells/common/proto/docstore/docstore.proto";

message SearchResults{
    repeated tree.Node Results = 1;
    int32 Total = 2;
}

// Generic container for responses sending pagination information
message Pagination {
    // Current Limit parameter, either passed by request or default value
    int32 Limit = 1;
    // Current Offset value
    int32 CurrentOffset = 2;
    // Total number of records
    int32 Total = 3;
    // Current number of Page
    int32 CurrentPage = 4;
    // Number of detected pages
    int32 TotalPages = 5;

    // Offset value for next page if there is one
    int32 NextOffset = 6;
    // Offset value for previous page, if there is one
    int32 PrevOffset = 7;
}

message Metadata {
    string Namespace = 1;
    string JsonMeta = 2;
}

message MetaCollection {
    string NodePath = 1;
    repeated Metadata Metadatas = 2;
}

message MetaNamespaceRequest{
    string NodePath = 1;
    repeated string Namespace = 2;
}

message GetBulkMetaRequest{
    repeated string NodePaths = 1;
    repeated string NodeUuids = 2;
    bool AllMetaProviders = 3;
    bool Versions = 4;
    int32 Offset = 5;
    int32 Limit = 6;
}

message BulkMetaResponse{
    repeated tree.Node Nodes = 1;
    Pagination Pagination = 5;
}

message HeadNodeRequest {
    string Node = 1;
}

message HeadNodeResponse {
    tree.Node Node = 1;
}

message CreateNodesRequest {
    repeated tree.Node Nodes = 1;
    bool Recursive = 2;
    string TemplateUUID = 3;
}

message CreateSelectionRequest {
    repeated tree.Node Nodes = 1;
    string TargetAction = 2;
    bool Persist = 3;
}

message CreateSelectionResponse {
    string SelectionUUID = 1;
    repeated tree.Node Nodes = 2;
}

message NodesCollection {
    tree.Node Parent = 1;
    repeated tree.Node Children = 2;
}

message DeleteNodesRequest {
    repeated tree.Node Nodes = 1;
    bool Recursive = 2;
}

message BackgroundJobResult {
    string Uuid = 1;
    string Label = 2;
}

message DeleteNodesResponse {
    repeated BackgroundJobResult DeleteJobs = 1;
}

message RestoreNodesRequest {
    repeated tree.Node Nodes = 1;
}

message RestoreNodesResponse {
    repeated BackgroundJobResult RestoreJobs = 1;
}

message ListDocstoreRequest {
    string StoreID = 1;
    docstore.DocumentQuery Query = 2;
    bool CountOnly = 3;
}

message DocstoreCollection {
    repeated docstore.Document Docs = 1;
    int64 Total = 2;
}

message ChangeRequest {
    int64 SeqID = 1;
    string filter = 2;
    bool flatten = 3;
    bool stream = 4;
}

message ChangeCollection {
    repeated tree.SyncChange Changes = 1 [json_name="changes"];
    int64 LastSeqId = 2 [json_name="last_seq"];
}
