/*
 * Copyright (c) 2018. Abstrium SAS <team (at) pydio.com>
 * This file is part of Pydio Cells.
 *
 * Pydio Cells is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pydio Cells is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Pydio Cells.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <https://pydio.com>.
 */

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: update.proto

/*
Package update is a generated protocol buffer package.

It is generated from these files:
	update.proto

It has these top-level messages:
	Package
	ApplyUpdateRequest
	ApplyUpdateResponse
	UpdateRequest
	UpdateResponse
	PublishPackageRequest
	PublishPackageResponse
	ListPackagesRequest
	ListPackagesResponse
	DeletePackageRequest
	DeletePackageResponse
*/
package update

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pydio/cells/common/proto/tree"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UpdateService service

type UpdateServiceClient interface {
	UpdateRequired(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, opts ...client.CallOption) (*ApplyUpdateResponse, error)
}

type updateServiceClient struct {
	c           client.Client
	serviceName string
}

func NewUpdateServiceClient(serviceName string, c client.Client) UpdateServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "update"
	}
	return &updateServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *updateServiceClient) UpdateRequired(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UpdateService.UpdateRequired", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, opts ...client.CallOption) (*ApplyUpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UpdateService.ApplyUpdate", in)
	out := new(ApplyUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateService service

type UpdateServiceHandler interface {
	UpdateRequired(context.Context, *UpdateRequest, *UpdateResponse) error
	ApplyUpdate(context.Context, *ApplyUpdateRequest, *ApplyUpdateResponse) error
}

func RegisterUpdateServiceHandler(s server.Server, hdlr UpdateServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UpdateService{hdlr}, opts...))
}

type UpdateService struct {
	UpdateServiceHandler
}

func (h *UpdateService) UpdateRequired(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.UpdateServiceHandler.UpdateRequired(ctx, in, out)
}

func (h *UpdateService) ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, out *ApplyUpdateResponse) error {
	return h.UpdateServiceHandler.ApplyUpdate(ctx, in, out)
}

// Client API for UpdateServerService service

type UpdateServerServiceClient interface {
	// Ask the update server if there are any available updates
	CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	PublishPackage(ctx context.Context, in *PublishPackageRequest, opts ...client.CallOption) (*PublishPackageResponse, error)
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...client.CallOption) (*ListPackagesResponse, error)
	DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...client.CallOption) (*DeletePackageResponse, error)
}

type updateServerServiceClient struct {
	c           client.Client
	serviceName string
}

func NewUpdateServerServiceClient(serviceName string, c client.Client) UpdateServerServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "update"
	}
	return &updateServerServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *updateServerServiceClient) CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UpdateServerService.CheckForUpdate", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerServiceClient) PublishPackage(ctx context.Context, in *PublishPackageRequest, opts ...client.CallOption) (*PublishPackageResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UpdateServerService.PublishPackage", in)
	out := new(PublishPackageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerServiceClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...client.CallOption) (*ListPackagesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UpdateServerService.ListPackages", in)
	out := new(ListPackagesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerServiceClient) DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...client.CallOption) (*DeletePackageResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UpdateServerService.DeletePackage", in)
	out := new(DeletePackageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateServerService service

type UpdateServerServiceHandler interface {
	// Ask the update server if there are any available updates
	CheckForUpdate(context.Context, *UpdateRequest, *UpdateResponse) error
	PublishPackage(context.Context, *PublishPackageRequest, *PublishPackageResponse) error
	ListPackages(context.Context, *ListPackagesRequest, *ListPackagesResponse) error
	DeletePackage(context.Context, *DeletePackageRequest, *DeletePackageResponse) error
}

func RegisterUpdateServerServiceHandler(s server.Server, hdlr UpdateServerServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UpdateServerService{hdlr}, opts...))
}

type UpdateServerService struct {
	UpdateServerServiceHandler
}

func (h *UpdateServerService) CheckForUpdate(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.UpdateServerServiceHandler.CheckForUpdate(ctx, in, out)
}

func (h *UpdateServerService) PublishPackage(ctx context.Context, in *PublishPackageRequest, out *PublishPackageResponse) error {
	return h.UpdateServerServiceHandler.PublishPackage(ctx, in, out)
}

func (h *UpdateServerService) ListPackages(ctx context.Context, in *ListPackagesRequest, out *ListPackagesResponse) error {
	return h.UpdateServerServiceHandler.ListPackages(ctx, in, out)
}

func (h *UpdateServerService) DeletePackage(ctx context.Context, in *DeletePackageRequest, out *DeletePackageResponse) error {
	return h.UpdateServerServiceHandler.DeletePackage(ctx, in, out)
}
