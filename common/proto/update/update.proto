syntax="proto3";

package update;

import "github.com/pmker/yux/common/proto/tree/tree.proto";

message Package {
    // Name of the application
    string PackageName = 1;
    // Version of this new binary
    string Version = 2;
    // Release date of the binary
    int32 ReleaseDate = 3;
    // Short human-readable description
    string Label = 4;
    // Long human-readable description (markdown)
    string Description = 5;
    // List or public URL of change logs
    string ChangeLog = 6;
    // License of this package
    string License = 16;

    // Https URL where to download the binary
    string BinaryURL = 7;
    // Checksum of the binary to verify its integrity
    string BinaryChecksum = 8;
    // Signature of the binary
    string BinarySignature = 9;
    // Hash type used for the signature
    string BinaryHashType = 10;
    // Size of the binary to download
    int64 BinarySize = 15;
    // GOOS value used at build time
    string BinaryOS = 17;
    // GOARCH value used at build time
    string BinaryArch = 18;

    // Not used : if binary is a patch
    bool IsPatch = 11;
    // Not used : if a patch, how to patch (bsdiff support)
    string PatchAlgorithm = 12;
    // Not used : at a point we may deliver services only updates
    string ServiceName = 13;

    enum PackageStatus {
        Draft = 0;
        Pending = 1;
        Released = 2;
    }
    PackageStatus Status = 14;

}

message ApplyUpdateRequest {
    string TargetVersion = 1;
}

message ApplyUpdateResponse {
    bool Success = 1;
    string Message = 2;
}

message UpdateRequest {
    // Channel name
    string Channel = 1;
    // Name of the currently running application
    string PackageName = 2;
    // Current version of the application
    string CurrentVersion = 3;
    // Current GOOS
    string GOOS = 4;
    // Current GOARCH
    string GOARCH = 5;
    // Not Used : specific service to get updates for
    string ServiceName = 6;
    // For enterprise version, info about the current license
    map<string,string> LicenseInfo = 7;
}

message UpdateResponse {
    string Channel = 1;
    // List of available binaries
    repeated Package AvailableBinaries = 2;
}

service UpdateService {
    rpc UpdateRequired(UpdateRequest) returns (UpdateResponse);
    rpc ApplyUpdate(ApplyUpdateRequest) returns (ApplyUpdateResponse);
}

message PublishPackageRequest {
    string Channel = 1;
    Package Package = 2;
    // Used internally to map to an existing file
    tree.Node Node = 3;
}

message PublishPackageResponse {
    bool Success = 1;
    Package Package = 2;
}

message ListPackagesRequest {
    string Channel = 1;
    string PackageName = 2;
}

message ListPackagesResponse {
    repeated Package Packages = 1;
}

message DeletePackageRequest {
    string Channel = 1;
    string PackageName = 2;
    string Version = 3;
    string BinaryOS = 4;
    string BinaryArch = 5;
}

message DeletePackageResponse {
    bool Success = 2;
}

// Serving binary updates
service UpdateServerService {
    // Ask the update server if there are any available updates
    rpc CheckForUpdate(UpdateRequest) returns (UpdateResponse);

    rpc PublishPackage(PublishPackageRequest) returns (PublishPackageResponse);
    rpc ListPackages(ListPackagesRequest) returns (ListPackagesResponse);
    rpc DeletePackage(DeletePackageRequest) returns (DeletePackageResponse);
}