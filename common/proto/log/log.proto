syntax="proto3";

package log;

service LogRecorder {
    // PutLog adds received log messages to the corresponding log repository.
    rpc PutLog(stream Log) returns (RecorderPutResponse) {}
    // ListLogs performs a paginated search query in the log repository.
    rpc ListLogs(ListLogRequest) returns (stream ListLogResponse) {}
    // AggregatedLogs performs a query to retrieve log events of the given type, faceted by time range.
    rpc AggregatedLogs(TimeRangeRequest) returns (stream TimeRangeResponse) {}
}

message RecorderPutResponse{}

// Log is a generic message format used by the sync service 
// to publish log messages to the various log repositories (typically, bleve).
message Log {
    map<string, string> message = 1;
}


// LogMessage is the format used to transmit log messages to clients via the REST API.
message LogMessage {
    // Generic zap fields 
    int32 Ts = 1;
    string Level = 2;
    string Logger = 3;
    string Msg  = 4;
    
    // Pydio specific 
    string MsgId  = 5;        
    // User Info
    string UserName  = 6 ;
    string UserUuid = 7 ;
    string GroupPath = 8 ;
    string Profile = 16;
    repeated string RoleUuids = 9;
    // Client info
    string RemoteAddress = 10;
    string UserAgent = 11;
    string HttpProtocol = 12;

    // Tree Info
    string NodeUuid = 13;
    string NodePath = 14;
    string WsUuid = 15;
    string WsScope = 17;

    // Span Info
    string SpanUuid = 18;
    string SpanParentUuid = 19;
    string SpanRootUuid = 20;
    // TODO a variable amount of contextual objects referenced by key
    // 	AuditContext map[string]interface{}
}

// ListLogRequest launches a parameterised query in the log repository and streams the results.
message ListLogRequest {
    // Bleve-type Query stsring
    string Query = 1;
    // Start at page
    int32 Page = 2;
    // Number of results
    int32 Size = 3;
    // Output Format
    enum LogFormat{
        JSON = 0;
        CSV  = 1;
        XLSX = 2;
    }
    LogFormat Format = 4;
}

message ListLogResponse {
    LogMessage LogMessage = 1;
}


/* TIME RANGE REQUESTS */ 

// TimeRangeResponse contains either one aggregated result of a facetted request 
// OR a time range cursor.
 message TimeRangeResponse {
    TimeRangeResult TimeRangeResult = 1;
    TimeRangeCursor TimeRangeCursor = 2;
}

// TimeRangeResult represents one point of a graph.
message TimeRangeResult{
    // a label for this time range
    string Name = 1;
    // begin timestamp      
    int32 Start = 2;
    // end timestamp      
    int32 End = 3;
    // nb of occurrences found within this range
    int32 Count = 4;
    // a score between 1 and 100 that gives the relevance of this result:
    // if End > now, we ponderate the returned count with the duration of the last time range
    // for instance for a hour range if now is 6PM, last count will be 
    // multiplied by 4/3 and have a relevance of 75. 
    // Relevance will be almost always equals to 100
    int32 Relevance = 5;
}

// TimeRangeRequest contains the parameter to configure the query to 
// retrieve the number of audit events of this type for a given time range
// defined by last timestamp and a range type.
message TimeRangeRequest {
    // Type of event we are auditing
    string MsgId = 1;
    // Known types: H, D, W, M or Y 
    string TimeRangeType = 2; 
    // Upper bound for our request 
    int32 RefTime = 3;
}

// Relative links types.
// Note that First is time.Now() and last time.Unix(0).
// We added an unused NONE enum with value 0 to workaround 0 issues between JSON and proto3.
enum RelType {
    NONE = 0;
    FIRST = 1;
    PREV  = 2;
    NEXT = 3;
    LAST = 4;
}

// Ease implementation of data navigation for a chart.
message TimeRangeCursor {
    RelType Rel = 1;
    int32 RefTime = 2; 
    int32 Count = 3;
}

