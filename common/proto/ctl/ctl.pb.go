// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ctl.proto

/*
Package ctl is a generated protocol buffer package.

It is generated from these files:
	ctl.proto

It has these top-level messages:
	Peer
	Service
	ServiceStatusEvent
*/
package ctl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceStatus int32

const (
	ServiceStatus_ANY      ServiceStatus = 0
	ServiceStatus_STOPPED  ServiceStatus = 1
	ServiceStatus_STARTING ServiceStatus = 2
	ServiceStatus_STOPPING ServiceStatus = 3
	ServiceStatus_STARTED  ServiceStatus = 4
)

var ServiceStatus_name = map[int32]string{
	0: "ANY",
	1: "STOPPED",
	2: "STARTING",
	3: "STOPPING",
	4: "STARTED",
}
var ServiceStatus_value = map[string]int32{
	"ANY":      0,
	"STOPPED":  1,
	"STARTING": 2,
	"STOPPING": 3,
	"STARTED":  4,
}

func (x ServiceStatus) String() string {
	return proto.EnumName(ServiceStatus_name, int32(x))
}
func (ServiceStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceCommand int32

const (
	ServiceCommand_START ServiceCommand = 0
	ServiceCommand_STOP  ServiceCommand = 1
)

var ServiceCommand_name = map[int32]string{
	0: "START",
	1: "STOP",
}
var ServiceCommand_value = map[string]int32{
	"START": 0,
	"STOP":  1,
}

func (x ServiceCommand) String() string {
	return proto.EnumName(ServiceCommand_name, int32(x))
}
func (ServiceCommand) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Peer struct {
	Id       string            `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Address  string            `protobuf:"bytes,2,opt,name=Address" json:"Address,omitempty"`
	Port     int32             `protobuf:"varint,3,opt,name=Port" json:"Port,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=Metadata" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Peer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Peer) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Service struct {
	Name         string        `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Version      string        `protobuf:"bytes,2,opt,name=Version" json:"Version,omitempty"`
	Description  string        `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
	Tag          string        `protobuf:"bytes,4,opt,name=Tag" json:"Tag,omitempty"`
	Controllable bool          `protobuf:"varint,5,opt,name=Controllable" json:"Controllable,omitempty"`
	Status       ServiceStatus `protobuf:"varint,7,opt,name=Status,enum=ctl.ServiceStatus" json:"Status,omitempty"`
	RunningPeers []*Peer       `protobuf:"bytes,6,rep,name=RunningPeers" json:"RunningPeers,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Service) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Service) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Service) GetControllable() bool {
	if m != nil {
		return m.Controllable
	}
	return false
}

func (m *Service) GetStatus() ServiceStatus {
	if m != nil {
		return m.Status
	}
	return ServiceStatus_ANY
}

func (m *Service) GetRunningPeers() []*Peer {
	if m != nil {
		return m.RunningPeers
	}
	return nil
}

type ServiceStatusEvent struct {
	SourceNode  string        `protobuf:"bytes,1,opt,name=SourceNode" json:"SourceNode,omitempty"`
	ServiceName string        `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Status      ServiceStatus `protobuf:"varint,3,opt,name=Status,enum=ctl.ServiceStatus" json:"Status,omitempty"`
}

func (m *ServiceStatusEvent) Reset()                    { *m = ServiceStatusEvent{} }
func (m *ServiceStatusEvent) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatusEvent) ProtoMessage()               {}
func (*ServiceStatusEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceStatusEvent) GetSourceNode() string {
	if m != nil {
		return m.SourceNode
	}
	return ""
}

func (m *ServiceStatusEvent) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceStatusEvent) GetStatus() ServiceStatus {
	if m != nil {
		return m.Status
	}
	return ServiceStatus_ANY
}

func init() {
	proto.RegisterType((*Peer)(nil), "ctl.Peer")
	proto.RegisterType((*Service)(nil), "ctl.Service")
	proto.RegisterType((*ServiceStatusEvent)(nil), "ctl.ServiceStatusEvent")
	proto.RegisterEnum("ctl.ServiceStatus", ServiceStatus_name, ServiceStatus_value)
	proto.RegisterEnum("ctl.ServiceCommand", ServiceCommand_name, ServiceCommand_value)
}

func init() { proto.RegisterFile("ctl.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x8a, 0xdb, 0x30,
	0x10, 0x86, 0x57, 0xb6, 0x13, 0x27, 0x93, 0x6c, 0x30, 0x43, 0xa1, 0xa2, 0x87, 0x62, 0x02, 0x05,
	0x13, 0x68, 0x0e, 0xbb, 0x97, 0xd2, 0x9e, 0xc2, 0x26, 0x94, 0x1c, 0xea, 0x35, 0xb2, 0x29, 0xf4,
	0xa8, 0xb5, 0x45, 0x08, 0x75, 0xac, 0x45, 0x56, 0x02, 0x7b, 0xed, 0x43, 0xf5, 0xa1, 0xfa, 0x14,
	0x45, 0xb2, 0xb2, 0xd8, 0xa7, 0xbd, 0xcd, 0xfc, 0xff, 0xcc, 0xf8, 0xd3, 0x8f, 0x61, 0x5a, 0xea,
	0x7a, 0xfd, 0xac, 0xa4, 0x96, 0xe8, 0x97, 0xba, 0x5e, 0xfe, 0x25, 0x10, 0x64, 0x42, 0x28, 0x5c,
	0x80, 0xb7, 0xaf, 0x28, 0x89, 0x49, 0x32, 0x65, 0xde, 0xbe, 0x42, 0x0a, 0xe1, 0xa6, 0xaa, 0x94,
	0x68, 0x5b, 0xea, 0x59, 0xf1, 0xda, 0x22, 0x42, 0x90, 0x49, 0xa5, 0xa9, 0x1f, 0x93, 0x64, 0xc4,
	0x6c, 0x8d, 0xf7, 0x30, 0xf9, 0x21, 0x34, 0xaf, 0xb8, 0xe6, 0x34, 0x88, 0xfd, 0x64, 0x76, 0xf7,
	0x7e, 0x6d, 0xbe, 0x64, 0x4e, 0xaf, 0xaf, 0xce, 0xae, 0xd1, 0xea, 0x85, 0xbd, 0x0e, 0x7e, 0xf8,
	0x06, 0xb7, 0x03, 0x0b, 0x23, 0xf0, 0x7f, 0x8b, 0x17, 0x07, 0x61, 0x4a, 0x7c, 0x07, 0xa3, 0x0b,
	0xaf, 0xcf, 0xc2, 0x31, 0x74, 0xcd, 0x57, 0xef, 0x0b, 0x59, 0xfe, 0x23, 0x10, 0xe6, 0x42, 0x5d,
	0x8e, 0xa5, 0x30, 0x44, 0x29, 0x3f, 0x09, 0xb7, 0x68, 0x6b, 0xc3, 0xff, 0x53, 0xa8, 0xf6, 0x28,
	0x9b, 0x2b, 0xbf, 0x6b, 0x31, 0x86, 0xd9, 0x56, 0xb4, 0xa5, 0x3a, 0x3e, 0x6b, 0xe3, 0xfa, 0xd6,
	0xed, 0x4b, 0x86, 0xa3, 0xe0, 0x07, 0x1a, 0x74, 0x1c, 0x05, 0x3f, 0xe0, 0x12, 0xe6, 0x0f, 0xb2,
	0xd1, 0x4a, 0xd6, 0x35, 0x7f, 0xaa, 0x05, 0x1d, 0xc5, 0x24, 0x99, 0xb0, 0x81, 0x86, 0x2b, 0x18,
	0xe7, 0x9a, 0xeb, 0x73, 0x4b, 0xc3, 0x98, 0x24, 0x8b, 0x3b, 0xb4, 0x09, 0x38, 0xc6, 0xce, 0x61,
	0x6e, 0x02, 0x3f, 0xc3, 0x9c, 0x9d, 0x9b, 0xe6, 0xd8, 0x1c, 0x4c, 0x42, 0x2d, 0x1d, 0xdb, 0xcc,
	0xa6, 0xaf, 0x99, 0xb1, 0x81, 0xbd, 0xfc, 0x43, 0x00, 0x07, 0x87, 0x76, 0x17, 0xd1, 0x68, 0xfc,
	0x08, 0x90, 0xcb, 0xb3, 0x2a, 0x45, 0x2a, 0xab, 0xeb, 0xeb, 0x7b, 0x8a, 0x79, 0xa9, 0xdb, 0xb2,
	0xf1, 0x74, 0x39, 0xf4, 0xa5, 0x1e, 0xb3, 0xff, 0x16, 0xf3, 0x2a, 0x85, 0xdb, 0x81, 0x81, 0x21,
	0xf8, 0x9b, 0xf4, 0x57, 0x74, 0x83, 0x33, 0x08, 0xf3, 0xe2, 0x31, 0xcb, 0x76, 0xdb, 0x88, 0xe0,
	0x1c, 0x26, 0x79, 0xb1, 0x61, 0xc5, 0x3e, 0xfd, 0x1e, 0x79, 0x5d, 0xf7, 0x98, 0x65, 0xa6, 0xf3,
	0xbb, 0xc1, 0x0d, 0x2b, 0x76, 0xdb, 0x28, 0x58, 0x7d, 0x82, 0x85, 0xbb, 0xf7, 0x20, 0x4f, 0x27,
	0xde, 0x54, 0x38, 0x85, 0x91, 0xb5, 0xa3, 0x1b, 0x9c, 0x40, 0x60, 0xf6, 0x22, 0xf2, 0x34, 0xb6,
	0x7f, 0xeb, 0xfd, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xab, 0xb9, 0x05, 0xba, 0x02, 0x00,
	0x00,
}
