syntax = "proto3";

import "github.com/pydio/cells/common/service/proto/common.proto";
import "github.com/pydio/cells/common/proto/tree/tree.proto";

package idm;

// *****************************************************************************
//  Services
// *****************************************************************************
service RoleService {
    rpc CreateRole (CreateRoleRequest) returns (CreateRoleResponse) {};
    rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse) {};
    rpc SearchRole (SearchRoleRequest) returns (stream SearchRoleResponse) {};
    rpc StreamRole (stream SearchRoleRequest) returns (stream SearchRoleResponse) {};
}

// *****************************************************************************
//  Messages structure
// *****************************************************************************
message CreateRoleRequest{
    Role Role = 1;
}

message CreateRoleResponse{
    Role Role = 1;
}

message DeleteRoleRequest{
    service.Query Query = 1;
}

message DeleteRoleResponse{
    int64 RowsDeleted = 1;
}

message SearchRoleRequest{
    service.Query Query = 1;
}

message SearchRoleResponse{
    Role Role = 1;
}

message Role {
    string Uuid = 1;
    string Label = 2;
    bool IsTeam = 3;
    bool GroupRole = 4;
    bool UserRole = 5;
    int32 LastUpdated = 6;
    repeated string AutoApplies = 7;
    repeated service.ResourcePolicy Policies = 8;
    bool PoliciesContextEditable = 9;
}

message RoleSingleQuery {
    repeated string Uuid = 1;
    string Label = 2;
    bool IsTeam = 3;
    bool IsGroupRole = 4;
    bool IsUserRole = 5;
    bool HasAutoApply = 6;
    bool not = 7;
}

// *****************************************************************************
//  Services
// *****************************************************************************
service UserService {

    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {};
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {};

    rpc BindUser (BindUserRequest) returns (BindUserResponse) {};

    rpc CountUser (SearchUserRequest) returns (CountUserResponse) {};
    rpc SearchUser (SearchUserRequest) returns (stream SearchUserResponse) {};
    rpc StreamUser (stream SearchUserRequest) returns (stream SearchUserResponse) {};

}

// *****************************************************************************
//  Messages structure
// *****************************************************************************
message CreateUserRequest{
    User User = 1;
}

message CreateUserResponse{
    User User = 1;
}

message BindUserRequest{
    string userName = 1;
    string password = 2;
}

message BindUserResponse{
    User User = 1;
}

message DeleteUserRequest{
    service.Query Query = 1;
}

message DeleteUserResponse{
    int64 RowsDeleted = 1;
}

message SearchUserRequest{
    service.Query Query = 1;
}

message SearchUserResponse{
    User User = 1;
}

message CountUserResponse {
    int32 Count = 1;
}

message User {

    string Uuid = 1;
    string GroupPath = 2;
    map<string, string> Attributes = 3;
    repeated Role Roles = 4;

    // User specific data
    string Login = 5;
    string Password = 6;
    string OldPassword = 11;

    // Group specific data
    bool IsGroup = 7;
    string GroupLabel = 8;

    repeated service.ResourcePolicy Policies = 9;
    bool PoliciesContextEditable = 10;

}

enum NodeType {
    UNKNOWN = 0;
    USER = 1;
    GROUP = 2;
}

message UserSingleQuery {

    string Uuid = 11;

    string Login = 1;
    string Password = 2;
    // Search on group path, and if so, search recursively
    string GroupPath = 3;
    bool Recursive = 4;
    // Search a specific group by path
    string FullPath = 12;

    // Search on attribute
    string AttributeName = 5;
    string AttributeValue = 6;
    bool AttributeAnyValue = 7;
    // Search on roles
    string HasRole = 8;
    NodeType NodeType = 9;

    bool not = 10;
}

// *****************************************************************************
//  Services Worskpace
// *****************************************************************************
service WorkspaceService {
    rpc CreateWorkspace (CreateWorkspaceRequest) returns (CreateWorkspaceResponse) {};
    rpc DeleteWorkspace (DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse) {};
    rpc SearchWorkspace (SearchWorkspaceRequest) returns (stream SearchWorkspaceResponse) {};
    rpc StreamWorkspace (stream SearchWorkspaceRequest) returns (stream SearchWorkspaceResponse) {};
}

// *****************************************************************************
//  Messages structure
// *****************************************************************************
message CreateWorkspaceRequest{
    Workspace Workspace = 1;
}

message CreateWorkspaceResponse{
    Workspace Workspace = 1;
}

message DeleteWorkspaceRequest{
    service.Query Query = 1;
}

message DeleteWorkspaceResponse{
    int64 RowsDeleted = 1;
}

message SearchWorkspaceRequest{
    service.Query Query = 1;
}

message SearchWorkspaceResponse{
    Workspace Workspace = 1;
}

enum WorkspaceScope{
    ANY = 0;
    ADMIN = 1;
    ROOM = 2;
    LINK = 3;
}

message Workspace {

    string UUID = 1;
    string Label = 2;
    string Description = 3;
    string Slug = 4;
    WorkspaceScope Scope = 5;
    int32 LastUpdated = 6;
    repeated service.ResourcePolicy Policies = 7;
    string Attributes = 8;

    repeated string RootUUIDs = 9;
    map<string,tree.Node> RootNodes = 11;
    bool PoliciesContextEditable = 12;
}

message WorkspaceSingleQuery {
    string uuid  = 1;
    string label = 2;
    string description = 3;
    string slug  = 4;
    WorkspaceScope scope = 5;
    bool not = 6;
}

// *****************************************************************************
//  ACL Services
// *****************************************************************************
service ACLService {
    rpc CreateACL (CreateACLRequest) returns (CreateACLResponse) {};
    rpc DeleteACL (DeleteACLRequest) returns (DeleteACLResponse) {};
    rpc SearchACL (SearchACLRequest) returns (stream SearchACLResponse) {};
    rpc StreamACL (stream SearchACLRequest) returns (stream SearchACLResponse) {};
}

// *****************************************************************************
//  ACL Messages structure
// *****************************************************************************
message CreateACLRequest{
    ACL ACL = 1;
}

message CreateACLResponse{
    ACL ACL = 1;
}

message DeleteACLRequest{
    service.Query Query = 1;
}

message DeleteACLResponse{
    int64 RowsDeleted = 1;
}

message SearchACLRequest{
    service.Query Query = 1;
}

message SearchACLResponse{
    ACL ACL = 1;
}

message ACLAction{
    string Name = 1;
    string Value = 2;
}

message ACL {
    string ID = 1;
    ACLAction Action = 2;
    string RoleID = 3;
    string WorkspaceID = 4;
    string NodeID = 5;
}

message ACLSingleQuery {
    repeated ACLAction Actions = 1;
    repeated string RoleIDs = 2;
    repeated string WorkspaceIDs = 3;
    repeated string NodeIDs = 4;
    bool not = 5;
}

// UserMetaService is a dedicated Metadata Service that implements the ResourcePolicy model,
// thus providing Read/Write authorizations at a fine-grained level.
service UserMetaService {
    rpc UpdateUserMeta(UpdateUserMetaRequest) returns (UpdateUserMetaResponse) {}
    rpc SearchUserMeta(SearchUserMetaRequest) returns (stream SearchUserMetaResponse) {}
    rpc UpdateUserMetaNamespace(UpdateUserMetaNamespaceRequest) returns (UpdateUserMetaNamespaceResponse){}
    rpc ListUserMetaNamespace(ListUserMetaNamespaceRequest) returns (stream ListUserMetaNamespaceResponse){}
}

// Piece of metadata attached to a node
message UserMeta {
    string Uuid = 1;
    string NodeUuid = 2;
    string Namespace = 3;
    string JsonValue = 4;
    repeated service.ResourcePolicy Policies = 5;
    bool PoliciesContextEditable = 6;
}
// Globally declared Namespace with associated policies
message UserMetaNamespace{
    string Namespace = 1;
    string Label = 2;
    int32 Order = 3;
    bool Indexable = 4;
    string JsonDefinition = 5;
    repeated service.ResourcePolicy Policies = 6;
}
// Request for modifying UserMeta
message UpdateUserMetaRequest{
    enum UserMetaOp {
        PUT = 0;
        DELETE = 1;
    }
    UserMetaOp Operation = 1;
    repeated UserMeta MetaDatas = 3;
}
// Response of UpdateUserMeta service
message UpdateUserMetaResponse{
    repeated UserMeta MetaDatas = 3;
}
// Request for searching UserMeta by NodeUuid or by Namespace
message SearchUserMetaRequest{
    repeated string MetaUuids = 1;
    repeated string NodeUuids = 2;
    string Namespace = 3;
    string ResourceSubjectOwner = 4;
    service.ResourcePolicyQuery ResourceQuery = 5;
}
// Streamed container for the UserMeta results
message SearchUserMetaResponse{
    UserMeta UserMeta = 1;
}
// Modify UserMetaNamespaces
message UpdateUserMetaNamespaceRequest{
    enum UserMetaNsOp {
        PUT = 0;
        DELETE = 1;
    }
    UserMetaNsOp Operation = 1;
    repeated UserMetaNamespace Namespaces = 2;
}
// Response of the
message UpdateUserMetaNamespaceResponse{
    repeated UserMetaNamespace Namespaces = 1;
}
// List All MetaNamespaces
message ListUserMetaNamespaceRequest{}
// Collection of results
message ListUserMetaNamespaceResponse{
    UserMetaNamespace UserMetaNamespace = 1;
}

// Message Types for ChangeEvent
enum ChangeEventType {
    CREATE = 0;
    READ   = 1;
    UPDATE = 2;
    DELETE = 3;
    BIND   = 4;
    LOGOUT = 5;
}

// Global Event message for IDM
message ChangeEvent {
    string jsonType = 1 [json_name="@type"];
    ChangeEventType Type = 2;
    User User = 3;
    Role Role = 4;
    Workspace Workspace = 5;
    ACL Acl = 6;
    map<string,string> Attributes = 7;
}

// ************************************
// Policy Engine Services
// ************************************
service PolicyEngineService {
    rpc IsAllowed (PolicyEngineRequest) returns (PolicyEngineResponse) {};
    rpc StorePolicyGroup(StorePolicyGroupRequest) returns (StorePolicyGroupResponse) {};
    rpc ListPolicyGroups(ListPolicyGroupsRequest) returns (ListPolicyGroupsResponse) {};
    rpc DeletePolicyGroup(DeletePolicyGroupRequest) returns (DeletePolicyGroupResponse) {};
}

// ************************************
// Messages Structures
// ************************************
message PolicyEngineRequest {
    string Resource  = 1;
    string Action = 2;
    repeated string Subjects = 3;
    map<string,string> Context = 4;
}

message PolicyEngineResponse {
    bool Allowed = 1;
    bool ExplicitDeny = 2;
    bool DefaultDeny = 3;
}

enum PolicyEffect {
    unknown = 0;
    deny = 1;
    allow = 2;
}

enum PolicyResourceGroup{
    rest = 0;
    acl  = 1;
    oidc = 2;
}

message PolicyCondition {
    string type = 1 [json_name="type"];
    string jsonOptions = 2 [json_name="jsonOptions"];
}

message Policy {
    string id = 1 [json_name="id"];
    string description = 2 [json_name="description"];
    repeated string subjects = 3 [json_name="subjects"];
    repeated string resources = 4 [json_name="resources"];
    repeated string actions = 5 [json_name="actions"];
    PolicyEffect effect = 6 [json_name="effect"];
    map <string,PolicyCondition> conditions = 7 [json_name="conditions"];
}

message PolicyGroup {
    string Uuid = 1;
    string Name = 2;
    string Description = 3;
    string OwnerUuid = 4;
    PolicyResourceGroup ResourceGroup = 5;
    int32 LastUpdated = 6;
    repeated Policy Policies = 7;
}

// Request / Response Messages
message StorePolicyGroupRequest{
    PolicyGroup PolicyGroup = 1;
}
message StorePolicyGroupResponse{
    PolicyGroup PolicyGroup = 1;
}
message DeletePolicyGroupRequest{
    PolicyGroup PolicyGroup = 1;
}
message DeletePolicyGroupResponse{
    bool Success = 1;
}
message ListPolicyGroupsRequest{
}
message ListPolicyGroupsResponse{
    repeated PolicyGroup PolicyGroups = 1;
    int32 Total = 2;
}
